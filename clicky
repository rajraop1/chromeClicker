from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# Function to check if an element is within the visible viewport
def is_element_in_viewport(driver, element):
    return driver.execute_script("""
        var rect = arguments[0].getBoundingClientRect();
        return (rect.top >= 0 && rect.left >= 0 &&
                rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                rect.right <= (window.innerWidth || document.documentElement.clientWidth));
    """, element)

# Function to check if the element is not obscured
def is_element_not_obscured(driver, element):
    return driver.execute_script("""
        var rect = arguments[0].getBoundingClientRect();
        var elementBehind = document.elementFromPoint(rect.left + 1, rect.top + 1);
        return elementBehind === arguments[0];
    """, element)

# Setup WebDriver
driver = webdriver.Chrome()

# Open the URL
driver.get("abcd.url")

# List of button texts to check
button_texts = ["Approve All", "Continue", "Login"]

# Loop to keep checking for visible, clickable and unobstructed buttons and click if found
while True:
    # Find all button elements by matching text using contains()
    xpath = "//*[contains(text(), 'Approve All') or contains(text(), 'Continue') or contains(text(), 'Login')]"
    buttons = driver.find_elements_by_xpath(xpath)

    # Filter buttons to only those visible, clickable and unobstructed
    visible_and_clickable_buttons = [
        button for button in buttons
        if is_element_in_viewport(driver, button) and 
           WebDriverWait(driver, 1).until(EC.element_to_be_clickable(button)) and
           is_element_not_obscured(driver, button)
    ]

    # If a visible and clickable button is found, click it and break the loop
    if visible_and_clickable_buttons:
        visible_and_clickable_buttons[0].click()
        print(f"Clicked on: {visible_and_clickable_buttons[0].text}")
        time.sleep(2)  # Wait for any possible page changes before continuing
    else:
        print("No relevant button found, waiting...")

    # Pause before checking again to avoid excessive CPU usage
    time.sleep(1)

# Close the browser after task is done
driver.quit()
